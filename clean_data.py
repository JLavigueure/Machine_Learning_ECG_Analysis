""""
Clean the processed data and save to pkl file. Removes unwanted features, imputes missing values, and scales the data.

Usage: 
    python clean_data.py 
""" 

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
import pickle
import os
import sys

def main():
    # Load the pickled dataframe
    with open('data/processed_data.pkl', 'rb') as f:
        data = pickle.load(f)

    # Remove arbitrary features 
    cols_to_drop = [
        'patient_id', 'nurse', 'site', 'device', 'recording_date', 'report', 'scp_codes', 
        'heart_axis', 'infarction_stadium1', 'infarction_stadium2', 'validated_by', 'second_opinion', 
        'initial_autogenerated_report', 'validated_by_human', 'baseline_drift', 'static_noise', 
        'burst_noise', 'electrodes_problems', 'extra_beats', 'pacemaker', 'filename_lr', 'filename_hr',
        'ecg', 'strat_fold'
    ]
    data.drop(columns=cols_to_drop, axis=1, inplace=True)

    # Remove features with little correlation to target
    cols_to_drop = ['total_voltage_1', 'total_voltage_2', 'total_voltage_3', 'total_voltage_4', 'total_voltage_5',
                    'total_voltage_6', 'total_voltage_7', 'total_voltage_8', 'total_voltage_9', 'total_voltage_10',
                    'total_voltage_11', 'total_voltage_12']
    data.drop(columns=cols_to_drop, axis=1, inplace=True)

    # Drop columns with many missing values and diagnosis data
    columns_to_drop = ['height', 'weight']
    data.drop(columns_to_drop, axis=1, inplace=True)

    # impute missing values
    imputer = SimpleImputer(strategy='mean')
    y = data['diagnostic_superclass']
    data.drop(columns=['diagnostic_superclass'], axis=1, inplace=True)
    data[:] = imputer.fit_transform(data[:])
    data['diagnostic_superclass'] = y

    # Scale data
    scaler = StandardScaler()
    y = data['diagnostic_superclass']
    data.drop(columns=['diagnostic_superclass'], inplace=True)
    # Use dataframe constructor to avoid implicit cast warning
    data = pd.DataFrame( 
        scaler.fit_transform(data.astype(np.float64)),
        columns=data.columns,
        index=data.index
    )
    data['diagnostic_superclass'] = y

    # No categorical data, so no one hot encoding needed

    # Save the cleaned data to a new pickle file
    with open('data/cleaned_data.pkl', 'wb') as f:
        pickle.dump(data, f)


if __name__ == "__main__":
    main()